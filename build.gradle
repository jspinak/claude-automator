plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.claude'
version = '1.0.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

dependencies {
    // Brobot library - includes Spring, Lombok, SLF4J as transitive dependencies
    implementation 'io.github.jspinak:brobot'
    
    // Force JavaCV platform dependencies to ensure native libraries are included
    implementation 'org.bytedeco:javacv-platform:1.5.10'
    
    // Explicitly include Windows native libraries
    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
        implementation 'org.bytedeco:opencv:4.9.0-1.5.10:windows-x86_64'
        implementation 'org.bytedeco:openblas:0.3.26-1.5.10:windows-x86_64'
        implementation 'org.bytedeco:ffmpeg:6.1.1-1.5.10:windows-x86_64'
    }
    
    // Jakarta annotations for @PostConstruct
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    
    // Jackson for proper serialization (if needed beyond what Brobot provides)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    
    // AspectJ for mock interceptors
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // Lombok for compile-time annotations and annotation processing
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
    
    // Show test output in console
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

// Images are loaded directly from the images directory by Brobot/Sikuli
// No need to copy them to build resources

// Specify the main class to avoid ambiguity
springBoot {
    mainClass = 'com.claude.automator.ClaudeAutomatorApplication'
}

// Configure bootRun to disable DPI awareness for pattern matching
bootRun {
    // Set JVM arguments to disable DPI awareness and configure library path
    jvmArgs = [
        '-Dorg.bytedeco.javacpp.logger.debug=true',  // Debug native library loading
        '-Djava.library.path=lib;lib/natives/windows-x86_64;' + System.getProperty('java.library.path'),
        '-Djna.library.path=lib',
        '-Dsikulixlibs=lib',
        '-Dbrobot.dpi.disable=true',
        '-Dsun.java2d.dpiaware=false',
        '-Dsun.java2d.uiScale=1.0'
    ]
    
    // Also set environment variables
    environment 'BROBOT_DISABLE_DPI', 'true'
    environment 'SIKULIXLIBS', 'lib'
}

// Task for running diagnostic tools
task runDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.brobot.tools.diagnostics.QuickMatchComparison'
    if (project.hasProperty('args')) {
        args project.args.split(' ')
    } else {
        args 'images/prompt/claude-prompt-3.png'
    }
}

// Task for running simple diagnostic
task runSimpleDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.SimpleDiagnostic'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running diagnostic with DPI
task runDPIDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticWithDPI'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running diagnostic with similarity scores
task runScoresDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticWithScores'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running diagnostic with capture and comparison
task runCaptureDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticWithCapture'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running pattern size diagnostic
task runSizeDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticPatternSizes'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running reverse match diagnostic
task runReverseDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticReverseMatch'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running content analysis diagnostic
task runContentDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticContentAnalysis'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running Windows capture diagnostic
task runWindowsDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticWindowsCapture'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running physical resize diagnostic
task runResizeDiagnostic(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.claude.automator.DiagnosticPhysicalResize'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running comprehensive capture test
task runCaptureTest(type: JavaExec) {
    description = 'Tests Claude patterns on different capture resolutions'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.ComprehensiveCaptureTest'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for running Brobot pattern comparison test
task runPatternComparison(type: JavaExec) {
    description = 'Compares claude-prompt-3 and claude-prompt-win with Brobot screenshots'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.BrobotPatternComparisonTest'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to test SikuliX resolution
task runSikuliXResolution(type: JavaExec) {
    description = 'Test to determine SikuliX resolution mode'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.SikuliXResolutionTest'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to compare screenshot methods
task runScreenshotComparison(type: JavaExec) {
    description = 'Compare Brobot vs Windows vs SikuliX IDE screenshots'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.ScreenshotComparisonTest'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to test FFmpeg configuration
task testFFmpegConfig(type: JavaExec) {
    description = 'Test FFmpeg capture configuration and pattern scaling settings'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.TestFFmpegConfig'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to test FFmpeg configuration with Spring context
task testFFmpegSpring(type: JavaExec) {
    description = 'Test FFmpeg configuration with Spring context loaded'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.TestFFmpegConfigSpring'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to diagnose capture resolutions
task diagnoseCaptureResolution(type: JavaExec) {
    description = 'Diagnose screen capture resolutions with all providers'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.CaptureResolutionDiagnostic'
    jvmArgs = [
        '-Dbrobot.dpi.disable=true',
        '-Dsun.java2d.dpiaware=false',
        '-Dsun.java2d.uiScale=1.0'
    ]
    environment 'BROBOT_DISABLE_DPI', 'true'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to test pattern matching with DPI settings
task testPatternMatching(type: JavaExec) {
    description = 'Test pattern matching with proper DPI settings'
    group = 'diagnostics'
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.claude.tools.PatternMatchingTest'
    jvmArgs = [
        '-Dbrobot.dpi.disable=true',
        '-Dsun.java2d.dpiaware=false',
        '-Dsun.java2d.uiScale=1.0'
    ]
    environment 'BROBOT_DISABLE_DPI', 'true'
    standardOutput = System.out
    errorOutput = System.err
}

// Task to print classpath for external tools
task printClasspath {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}